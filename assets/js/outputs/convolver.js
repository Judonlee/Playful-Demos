/*
 * Convolves a sound
 * http://www.happyworm.com
 *
 * Copyright (c) 2014 Happyworm Ltd
 * Licensed under the MIT license.
 * http://opensource.org/licenses/MIT
 *
 * Author: Mark J Panaghiston
 * Version: 0.0.1
 * Date: 4th June 2014
 */

(function(PM) {

	var DEBUG = false;

	var Convolver = function(options) {
		this.init(options);
	};

	if(typeof PM === 'undefined') {
		window.Convolver = Convolver; // 
	} else {
		PM.Convolver = function(options) {
			return new Convolver(options); // 
		};
	}

	Convolver.prototype = {
		init: function(options) {
			var self = this;
			// The default options
			this.options = {
				id: '', // The id for broadcasts
				impulse: 'assets/audio/impulse/lobby.wav',
				input: null, // The Node to connect to the input. Usually an AudioNode, but can be any object. [Rule: It must have the connect() method.]
				gain: 1,
				passThrough: false,
				destination: null, // The destination to use, or defaults to the context destination
				callback: null,
				context: null
			};
			// Read in instancing options.
			for(var option in options) {
				if(options.hasOwnProperty(option)) {
					this.options[option] = options[option];
				}
			}
			// The Web Audio API context
			this.context = PM && PM.context ? PM.context : this.options.context;
			this.destination = this.options.destination === null ? this.context.destination : this.options.destination;

			// Web Audio API
			this.node = this.context.createConvolver();
			this.amp = this.context.createGain();
			this.pure = this.context.createGain();
			this.gain(this.options.gain);

			// Connect the audio map
			this.node.connect(this.amp);
			if(this.options.input) {
				this.input(this.options.input);
			}
			if(!this.options.passThrough) {
				this.connect(this.destination);
			}

			// XHR request to get the impule response WAV
			this.request = new XMLHttpRequest();
			this.request.open("GET", this.options.impulse, true);
			this.request.responseType = "arraybuffer";
			this.request.onload = function() {
				self.context.decodeAudioData(self.request.response, function(buffer) {
					self.buffer = buffer;
					self.node.buffer = buffer;
					self.broadcast('convolver_ready');
					if(typeof self.options.callback === 'function') {
						self.options.callback.call(self);
					}
				});
			};
			this.request.send();
		},
		broadcast: function(type) {
			// Broadcast the message
			if(PM) {
				PM.broadcast(type, {
					id: this.options.id,
					target: this,
					msg: 'Generated by: Convolver'
				});
			}
		},
		gain: function(gain) {
			gain = gain > 1 ? 1 : gain < 0 ? 0 : gain;
			this.amp.gain.value = gain;
			this.pure.gain.value = 1 - gain;
			// console.log('gain: ' + gain);
		},
		connect: function(output) {
			this.amp.connect(output);
			this.pure.connect(output);
		},
		input: function(input) {
			input.connect(this.node);
			input.connect(this.pure);
		}
	}
}(window.PM));
